@model IEnumerable<Health_Insurance.Models.Enrollment>
@* Ensure the model namespace is correct based on your project name *@

@{
    ViewData["Title"] = "Your Enrolled Policies";
}

<div class="dashboard-header">
    <h1>@ViewData["Title"]</h1>
</div>

<div class="dashboard-card">
    <div class="dashboard-card-header">
        <h2 class="dashboard-card-title">Enrolled Policy List</h2>
    </div>
    <div class="dashboard-card-body">
        @if (ViewBag.EmployeeName != null)
        {
            <h4 class="mb-3">Employee: @ViewBag.EmployeeName</h4>
        }

        <div class="table-responsive">
            <table class="table table-hover dashboard-table">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.Policy.PolicyName)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Policy.CoverageAmount)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.EnrollmentDate)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Status)
                        </th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Policy.PolicyName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Policy.CoverageAmount)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.EnrollmentDate)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Status)
                                </td>
                                <td class="text-center">
                                    <button type="button" class="btn btn-danger btn-sm dashboard-btn-danger cancel-enrollment-btn"
                                            data-enrollment-id="@item.EnrollmentId"
                                            data-employee-id="@item.EmployeeId"
                                            data-policy-name="@item.Policy.PolicyName"
                                            title="Cancel Enrollment">
                                        <i class="fas fa-times-circle"></i> Cancel
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted py-4">
                                No policies enrolled.
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (ViewBag.ErrorMessage != null)
        {
            <div class="alert alert-danger mt-3">
                @ViewBag.ErrorMessage
            </div>
        }

        <div class="button-group-spacing mt-4">
            <a asp-action="Index" class="btn btn-outline-primary modern-action-btn">
                <i class="fas fa-eye"></i> View Available Policies
            </a>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            // Get references to modal elements
            var confirmModal = $('#confirmCancelModal');
            var confirmModalTitle = $('#confirmCancelModalLabel');
            var confirmModalBody = $('#confirmCancelModalBody');
            var confirmDeleteBtn = $('#confirmCancelButton');

            // Store data of the enrollment to be canceled
            var enrollmentToCancel = {};

            // Open confirmation modal on button click
            $('.cancel-enrollment-btn').on('click', function () {
                enrollmentToCancel.enrollmentId = $(this).data('enrollment-id');
                enrollmentToCancel.employeeId = $(this).data('employee-id');
                enrollmentToCancel.policyName = $(this).data('policy-name');

                confirmModalTitle.text('Confirm Cancellation');
                confirmModalBody.html('Are you sure you want to cancel the enrollment for policy <strong>' + enrollmentToCancel.policyName + '</strong>? This action cannot be undone.');
                confirmModal.css('display', 'block'); // Show modal
                confirmModal.addClass('show'); // Add show class for transition
            });

            // Handle confirm button click in modal
            confirmDeleteBtn.on('click', function () {
                var form = $('<form action="@Url.Action("CancelEnrollment", "Enrollment")" method="post" style="display:none;"></form>');
                form.append('<input type="hidden" name="enrollmentId" value="' + enrollmentToCancel.enrollmentId + '" />');
                form.append('<input type="hidden" name="employeeId" value="' + enrollmentToCancel.employeeId + '" />');
                form.append($('input[name="__RequestVerificationToken"]').clone()); // Clone anti-forgery token
                $('body').append(form);
                form.submit();
            });

            // Close modal button clicks
            $('.modal .close-button, .modal .cancel-button').on('click', function () {
                confirmModal.removeClass('show'); // Remove show class for transition
                setTimeout(function() {
                    confirmModal.css('display', 'none'); // Hide modal after transition
                }, 300); // Match transition duration
            });

            // Close modal when clicking outside
            $(window).on('click', function(event) {
                if ($(event.target).is(confirmModal)) {
                    confirmModal.removeClass('show');
                    setTimeout(function() {
                        confirmModal.css('display', 'none');
                    }, 300);
                }
            });
        });
    </script>
}

<style>
    /* MODAL STYLES */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1050; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        padding-top: 50px;
        transition: opacity 0.3s ease-in-out; /* For fade effect */
        opacity: 0;
    }

        .modal.show {
            opacity: 1;
        }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto; /* 5% from the top and centered */
        padding: 20px;
        border: 1px solid #888;
        width: 80%; /* Could be more responsive */
        max-width: 500px; /* Max width for larger screens */
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        position: relative;
        transform: translateY(-50px); /* Initial state for animation */
        transition: transform 0.3s ease-in-out; /* For slide-in effect */
    }

    .modal.show .modal-content {
        transform: translateY(0); /* Final state for animation */
    }

    .modal-header {
        padding: 15px;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .modal-header h5 {
            margin: 0;
            font-size: 1.25rem;
            color: #343a40;
        }

    .modal-body {
        padding: 20px 15px;
        font-size: 1rem;
        color: #555;
    }

    .modal-footer {
        padding: 15px;
        border-top: 1px solid #e9ecef;
        display: flex;
        justify-content: flex-end;
        gap: 10px; /* Space between buttons */
    }

    .close-button {
        color: #aaa;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        background: none;
        border: none;
        padding: 0;
    }

        .close-button:hover,
        .close-button:focus {
            color: #000;
            text-decoration: none;
        }
</style>

<!-- Custom Confirmation Modal HTML -->
<div id="confirmCancelModal" class="modal" tabindex="-1" role="dialog" aria-labelledby="confirmCancelModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmCancelModalLabel">Confirm Cancellation</h5>
                <button type="button" class="close-button" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="confirmCancelModalBody">
                Are you sure you want to cancel this enrollment? This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary cancel-button">No, Keep It</button>
                <button type="button" class="btn btn-danger" id="confirmCancelButton">Yes, Cancel</button>
            </div>
        </div>
    </div>
</d
