@model IEnumerable<Health_Insurance.Models.Policy>
@* Ensure the model namespace is correct *@

@{
    ViewData["Title"] = "Available Policies for Enrollment";
}

<style>
    /* Color Palette Variables */
    :root {
        --primary-green-dark: #4B5945; /* Darkest Green */
        --primary-green-medium-dark: #66785F; /* Medium Dark Green */
        --primary-green-medium-light: #91AC8F; /* Medium Light Green */
        --primary-green-light: #B2C9AD; /* Lightest Green */
        --neutral-dark-text: #343a40; /* Original dark text, good contrast */
        --neutral-light-bg: #f8f9fa; /* Original light background */
        --subtle-border: #e9ecef; /* Original subtle border */
    }

    /* General Body & Typography */
    body {
        font-family: 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
        background-color: var(--neutral-light-bg);
        color: var(--neutral-dark-text);
        line-height: 1.6;
    }

    /* Main Heading */
    h1 {
        color: var(--primary-green-dark); /* Darkest green for main heading */
        font-weight: 600;
        margin-bottom: 1.5rem;
    }

    /* Subheading for Policies */
    h2 {
        color: var(--primary-green-dark); /* Darkest green for main heading */
        font-weight: 600;
        margin-bottom: 1rem;
        margin-top: 2rem; /* Added margin-top for separation */
    }

    /* Employee Selection Section */
    .employee-selection-card {
        background-color: rgba(178, 201, 173, 0.1); /* Very light green tint for the card */
        border: 1px solid var(--primary-green-light); /* Lightest green border */
        border-radius: 10px; /* More rounded corners for the card */
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05); /* Subtle shadow */
    }

        .employee-selection-card h4 {
            color: var(--primary-green-dark); /* Darkest green for card heading */
            margin-bottom: 1rem;
            font-weight: 500;
        }

        .employee-selection-card .form-label {
            font-weight: 500;
            color: var(--primary-green-medium-dark); /* Medium dark green for label */
        }

    #employeeMultiSelect {
        border-color: var(--primary-green-light); /* Lightest green border for select */
        box-shadow: inset 0 1px 2px rgba(0,0,0,0.03); /* Subtle inset shadow */
        min-height: 80px; /* Ensure it looks like a multi-select */
    }

        #employeeMultiSelect:focus {
            border-color: var(--primary-green-medium-dark);
            box-shadow: 0 0 0 0.25rem rgba(102, 120, 95, 0.25); /* Focus shadow */
        }

    /* Table Styling */
    .table {
        background-color: #ffffff; /* White background for the table itself */
        border-collapse: collapse;
        width: 100%;
        margin-top: 0; /* Adjusted from original as h2 is above */
        border: 1px solid var(--primary-green-light); /* Lightest green outer border */
        border-radius: 8px; /* Rounded corners for the table */
        overflow: hidden; /* Ensures rounded corners apply to content */
    }

        .table thead.table-dark { /* Specificity for thead */
            background-color: var(--primary-green-medium-dark); /* Medium dark green for table header */
            color: #fff;
        }

        .table th {
            color: #fff; /* White text for header */
            font-weight: 600;
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid rgba(255,255,255,0.2); /* Slightly transparent white border for header cells */
        }

        .table tbody tr {
            border-bottom: 1px solid var(--primary-green-light); /* Lightest green border between rows */
        }

            .table tbody tr:last-child {
                border-bottom: none; /* No border for the last row */
            }

        .table td {
            padding: 12px 15px;
            vertical-align: middle;
            color: var(--neutral-dark-text);
        }

    /* Striped rows */
    .table-striped tbody tr:nth-of-type(odd) {
        background-color: rgba(178, 201, 173, 0.1); /* Very light green tint for odd rows */
    }

    /* Hover effect for rows */
    .table-hover tbody tr:hover {
        background-color: var(--primary-green-light); /* Lightest green on hover */
        cursor: pointer;
    }

    /* Enroll Button */
    .btn-success { /* Overriding Bootstrap default success green */
        background-color: var(--primary-green-dark); /* Darkest green for enroll button */
        border-color: var(--primary-green-dark);
        color: #fff;
        padding: 8px 15px;
        border-radius: 5px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

        .btn-success:hover {
            background-color: var(--primary-green-medium-dark); /* Medium dark green on hover */
            border-color: var(--primary-green-medium-dark);
            transform: translateY(-2px); /* Slight lift effect */
            box-shadow: 0 4px 8px rgba(75, 89, 69, 0.2); /* Subtle shadow tinted with darkest green */
        }

    /* Message Display Area */
    #enrollmentMessages .alert {
        border-radius: 8px;
        padding: 1rem 1.25rem;
        margin-bottom: 1rem;
        font-weight: 500;
    }

    #enrollmentMessages .alert-success {
        background-color: #e0ffe0; /* Lighter custom green for success */
        color: #336633; /* Darker custom green for success text */
        border-color: #b3ffb3;
    }

    #enrollmentMessages .alert-warning {
        background-color: #fff3cd; /* Bootstrap warning default */
        color: #856404;
        border-color: #ffeeba;
    }

    #enrollmentMessages .alert-danger {
        background-color: #f8d7da; /* Bootstrap danger default */
        color: #721c24;
        border-color: #f5c6cb;
    }

    /* No Policies Available Alert */
    .alert-info {
        background-color: #d1ecf1; /* Bootstrap info default */
        color: #0c5460;
        border-color: #bee5eb;
        border-radius: 8px;
        padding: 1rem 1.25rem;
    }
</style>

<h1 class="mb-4">Available Policies</h1>

@* Anti-Forgery Token for AJAX POSTs *@
@Html.AntiForgeryToken()

@* Employee Selection Section - Conditional based on role - PLACED ABOVE TABLE *@
<div class="mb-4 p-3 employee-selection-card">
    @* Custom class for styling *@
    @if (ViewBag.IsEmployee != null && ViewBag.IsEmployee)
    {
        <h4>Your Employee Profile</h4>
        <p class="mb-0"><strong>Employee:</strong> @ViewBag.LoggedInEmployeeName</p>
        <input type="hidden" id="selectedEmployeeId" value="@ViewBag.LoggedInEmployeeId" />
        <small class="text-muted">You will be automatically enrolled when you click 'Enroll'.</small>
    }
    else
    {
        <h4>Select Employees for Enrollment</h4>
        <div class="form-group">
            <label for="employeeMultiSelect" class="form-label">Select One or More Employees:</label>
            @* Changed size="3" to make it look like a standard dropdown initially *@
            <select id="employeeMultiSelect" name="employeeIds" class="form-control" multiple size="3" asp-items="ViewBag.EmployeeList" required>
                @* Adding a placeholder option for UX, though asp-items handles this well *@
                <option value="" disabled selected>-- Select Employee(s) --</option>
            </select>
            <small class="form-text text-muted">Hold **Ctrl** (Windows) or **Cmd** (Mac) to select multiple employees.</small>
        </div>
    }
</div>

@* Message display area for AJAX responses *@
<div id="enrollmentMessages" class="mt-3">
</div>


<h2 class="mb-3 mt-4">Available Policies</h2>

@if (Model != null && Model.Any())
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>@Html.DisplayNameFor(model => model.First().PolicyName)</th>
                <th>@Html.DisplayNameFor(model => model.First().CoverageAmount)</th>
                <th>@Html.DisplayNameFor(model => model.First().PremiumAmount)</th>
                <th>@Html.DisplayNameFor(model => model.First().PolicyType)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var policy in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => policy.PolicyName)</td>
                    <td>@Html.DisplayFor(modelItem => policy.CoverageAmount)</td>
                    <td>@Html.DisplayFor(modelItem => policy.PremiumAmount)</td>
                    <td>@Html.DisplayFor(modelItem => policy.PolicyType)</td>
                    <td>
                        @* Button to trigger JS AJAX for enrollment *@
                        <button type="button" class="btn btn-success btn-sm enroll-btn" data-policy-id="@policy.PolicyId">Enroll</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info" role="alert">
        No policies available for enrollment at this time.
    </div>
}

@section Scripts {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            var isEmployeeView = @(ViewBag.IsEmployee != null && ViewBag.IsEmployee ? "true" : "false");
            var messagesContainer = $('#enrollmentMessages');

            // Clear messages when an employee selection changes (for Admin/HR view)
            $('#employeeMultiSelect').on('change', function() {
                messagesContainer.empty();
            });

            // Handle Enroll button clicks
            $('.enroll-btn').on('click', function () {
                var policyId = $(this).data('policy-id');
                var employeeIds = [];
                messagesContainer.empty(); // Clear previous messages

                if (isEmployeeView) {
                    var employeeId = $('#selectedEmployeeId').val();
                    if (!employeeId || employeeId === '0') {
                        messagesContainer.append('<div class="alert alert-danger">Your employee ID could not be determined. Please log in again.</div>');
                        return;
                    }
                    employeeIds.push(employeeId);
                } else {
                    employeeIds = $('#employeeMultiSelect').val(); // Gets an array of selected values

                    if (!employeeIds || employeeIds.length === 0) {
                        messagesContainer.append('<div class="alert alert-danger">Please select at least one employee.</div>');
                        return;
                    }
                }

                var postData = {
                    policyId: policyId,
                    employeeIds: employeeIds
                };

                $.ajax({
                    url: '@Url.Action("Enroll", "Enrollment")',
                    type: 'POST',
                    data: postData,
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response && response.messages && response.messages.length > 0) {
                            response.messages.forEach(function(msg) {
                                messagesContainer.append('<div class="alert ' + (response.success ? 'alert-success' : 'alert-warning') + '">' + msg + '</div>');
                            });
                        } else if (response.success) {
                            messagesContainer.append('<div class="alert alert-success">Enrollment successful.</div>');
                        } else {
                            messagesContainer.append('<div class="alert alert-danger">An unknown error occurred during enrollment.</div>');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX error: ", status, error, xhr.responseText);
                        let errorMessage = 'Error processing enrollment. Please try again.';
                        try {
                            const errorResponse = JSON.parse(xhr.responseText);
                            if (xhr.status === 403) {
                                errorMessage = "You do not have permission to enroll for these selections.";
                            } else if (errorResponse && errorResponse.title) {
                                errorMessage = errorResponse.title;
                            }
                        } catch (e) { /* not JSON */ }
                        messagesContainer.append('<div class="alert alert-danger">' + errorMessage + '</div>');
                    }
                });
            });
        });
    </script>
}