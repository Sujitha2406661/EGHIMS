@{
    ViewData["Title"] = "Employee Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml"; // Ensure this points to your shared layout
}

<style>
    /* Basic Dashboard Styling */
    body {
        background-color: #f8f9fa; /* Light background for the whole page */
    }

    .dashboard-section {
        margin-bottom: 2rem;
        padding: 1.5rem;
        background-color: #fff;
        border-radius: 0.5rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .kpi-card {
        border: none;
        border-radius: 0.5rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        transition: transform 0.2s;
        background-color: #fcfcfc; /* Slightly off-white for KPI cards */
    }

        .kpi-card:hover {
            transform: translateY(-5px);
        }

    .kpi-icon {
        font-size: 2.5rem;
        margin-bottom: 0.5rem;
        color: #0d6efd; /* Bootstrap primary */
    }

    .kpi-title {
        font-size: 1rem;
        font-weight: 600;
        color: #6c757d; /* Bootstrap secondary */
    }

    .kpi-value {
        font-size: 2rem;
        font-weight: 700;
        color: #343a40; /* Dark text */
    }

    .table-responsive {
        margin-top: 1rem;
    }

    .form-section {
        background-color: #f8f9fa;
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 2rem;
    }

    .alert-message {
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 0.25rem;
        display: none; /* Hidden by default */
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .alert-info {
        color: #0c5460;
        background-color: #d1ecf1;
        border-color: #bee5eb;
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.25rem 0.625rem;
        border-radius: 9999px; /* pill shape */
        font-size: 0.75rem;
        font-weight: 500;
    }

        .status-badge i {
            margin-right: 0.25rem;
        }

        .status-badge.approved {
            background-color: #d1fae5;
            color: #065f46;
        }

        .status-badge.submitted {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .status-badge.rejected {
            background-color: #fee2e2;
            color: #991b1b;
        }

        .status-badge.active-enrollment {
            background-color: #ccffe5;
            color: #008000;
        }

        .status-badge.pending-enrollment {
            background-color: #fff9c4;
            color: #fbc02d;
        }

        .status-badge.cancelled-enrollment {
            background-color: #ffcdd2;
            color: #d32f2f;
        }

    /* Chart specific styling */
    canvas {
        max-width: 100%;
        height: auto; /* Adjust height automatically */
    }
</style>

<div class="container-fluid py-4">
    <!-- TEMPORARY DEBUG STYLES FOR SPINNER: MAKE IT OBVIOUS -->
    <div id="loading-spinner" class="d-none justify-content-center align-items-center" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255,0,0,0.5); /* RED OVERLAY */ z-index: 9999; /* HIGHER Z-INDEX */ border: 5px solid yellow; /* BORDER */">
        <div class="spinner-border text-primary" role="status" style="width: 5rem; height: 5rem;">
            <!-- LARGER SPINNER -->
            <span class="visually-hidden">Loading...</span>
        </div>
        <span class="ms-3 text-white" style="font-size: 2rem; text-shadow: 2px 2px 4px black;">Loading dashboard data...</span> <!-- LARGER TEXT -->
    </div>
    <!-- END TEMPORARY DEBUG STYLES -->

    <h1 class="h2 fw-bold text-gray-800 mb-4">Employee Dashboard</h1>

    <div class="d-flex justify-content-center mb-4">
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-primary active" data-section="overview"><i class="fas fa-chart-line me-2"></i>Dashboard Overview</button>
            <button type="button" class="btn btn-outline-primary" data-section="enrolled-policies"><i class="fas fa-file-invoice-dollar me-2"></i>My Policies</button>
            <button type="button" class="btn btn-outline-primary" data-section="available-policies"><i class="fas fa-search me-2"></i>Available Policies</button>
            <button type="button" class="btn btn-outline-primary" data-section="enrollment-creation"><i class="fas fa-plus-square me-2"></i>New Enrollment</button>
            <button type="button" class="btn btn-outline-primary" data-section="my-claims"><i class="fas fa-clipboard-list me-2"></i>My Claims</button>
            <button type="button" class="btn btn-outline-primary" data-section="submit-claim"><i class="fas fa-paper-plane me-2"></i>Submit Claim</button>
            <button type="button" class="btn btn-outline-primary" data-section="premium-calculator"><i class="fas fa-calculator me-2"></i>View Policy Details</button>
        </div>
    </div>

    <!-- Dashboard Overview Section (New) -->
    <div id="overview-section" class="dashboard-section">
        <h2 class="h4 fw-bold text-gray-700 mb-3">Your Overview</h2>
        <div class="row row-cols-1 row-cols-md-3 g-4 mb-4">
            <div class="col">
                <div class="card kpi-card h-100 text-center">
                    <div class="card-body">
                        <i class="fas fa-file-invoice-dollar kpi-icon text-primary"></i>
                        <h3 class="kpi-title">Total Enrolled Policies</h3>
                        <p class="kpi-value" id="kpi-total-enrolled-policies"></p>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card kpi-card h-100 text-center">
                    <div class="card-body">
                        <i class="fas fa-clipboard-list kpi-icon text-success"></i>
                        <h3 class="kpi-title">Total Claims Submitted</h3>
                        <p class="kpi-value" id="kpi-total-claims-submitted"></p>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card kpi-card h-100 text-center">
                    <div class="card-body">
                        <i class="fas fa-hand-holding-usd kpi-icon text-info"></i>
                        <h3 class="kpi-title">Policies Available</h3>
                        <p class="kpi-value" id="kpi-total-available-policies"></p>
                    </div>
                </div>
            </div>
        </div>

        <div class="row g-4 mb-4">
            <div class="col-lg-6">
                <div class="card dashboard-section h-100 p-3">
                    <h3 class="h5 fw-semibold text-gray-700 mb-3">My Enrolled Policies by Type</h3>
                    <canvas id="enrolledPoliciesByTypeChart" class="w-100" style="max-height: 300px;"></canvas>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card dashboard-section h-100 p-3">
                    <h3 class="h5 fw-semibold text-gray-700 mb-3">My Claims Status Distribution</h3>
                    <canvas id="claimsStatusChart" class="w-100" style="max-height: 300px;"></canvas>
                </div>
            </div>
        </div>

        <div class="row g-4 mb-4">
            <div class="col-12">
                <div class="card dashboard-section h-100 p-3">
                    <h3 class="h5 fw-semibold text-gray-700 mb-3">Your Enrollment Trend (Last 6 Months)</h3>
                    <canvas id="enrollmentTrendChart" class="w-100" style="max-height: 350px;"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Enrolled Policies Section -->
    <div id="enrolled-policies-section" class="dashboard-section" style="display: none;">
        <h2 class="h4 fw-bold text-gray-700 mb-3">My Enrolled Policies</h2>
        <div class="table-responsive">
            <table class="table table-hover table-striped">
                <thead class="bg-light">
                    <tr>
                        <th>Enrollment ID</th>
                        <th>Policy Name</th>
                        <th>Policy Type</th>
                        <th>Coverage</th>
                        <th>Premium</th>
                        <th>Enrollment Date</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody id="enrolledPoliciesTableBody">
                    <!-- Data will be populated by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Available Policies Section -->
    <div id="available-policies-section" class="dashboard-section" style="display: none;">
        <h2 class="h4 fw-bold text-gray-700 mb-3">Available Policies for Enrollment</h2>
        <div class="table-responsive">
            <table class="table table-hover table-striped">
                <thead class="bg-light">
                    <tr>
                        <th>Policy ID</th>
                        <th>Policy Name</th>
                        <th>Policy Type</th>
                        <th>Coverage Amount</th>
                        <th>Premium Amount</th>
                    </tr>
                </thead>
                <tbody id="availablePoliciesTableBody">
                    <!-- Data will be populated by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Enrollment Creation Section -->
    <div id="enrollment-creation-section" class="dashboard-section" style="display: none;">
        <h2 class="h4 fw-bold text-gray-700 mb-3">Enroll in a New Policy</h2>
        <div class="form-section">
            <div id="enrollmentMessage" class="alert-message"></div>
            <form id="enrollmentForm">
                <div class="mb-3">
                    <label for="enrollmentPolicySelect" class="form-label">Select Policy</label>
                    <select class="form-select" id="enrollmentPolicySelect" required>
                        <option value="">-- Select a Policy --</option>
                        <!-- Options populated by JavaScript -->
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">Enroll in Policy</button>
            </form>
        </div>
    </div>

    <!-- My Claims Section -->
    <div id="my-claims-section" class="dashboard-section" style="display: none;">
        <h2 class="h4 fw-bold text-gray-700 mb-3">My Submitted Claims</h2>
        <div class="table-responsive">
            <table class="table table-hover table-striped">
                <thead class="bg-light">
                    <tr>
                        <th>Claim ID</th>
                        <th>Enrollment ID</th>
                        <th>Policy Name</th>
                        <th>Policy Type</th>
                        <th>Claim Date</th>
                        <th>Requested Amount</th>
                        <th>Approved Amount</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody id="claimsTableBody">
                    <!-- Data will be populated by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Submit Claim Section -->
    <div id="submit-claim-section" class="dashboard-section" style="display: none;">
        <h2 class="h4 fw-bold text-gray-700 mb-3">Submit a New Claim</h2>
        <div class="form-section">
            <div id="claimMessage" class="alert-message"></div>
            <form id="claimForm">
                <div class="mb-3">
                    <label for="claimEnrollmentSelect" class="form-label">Select Enrolled Policy</label>
                    <select class="form-select" id="claimEnrollmentSelect" required>
                        <option value="">-- Select an Enrolled Policy --</option>
                        <!-- Options populated by JavaScript -->
                    </select>
                </div>
                <div class="mb-3">
                    <label for="claimAmount" class="form-label">Requested Amount (₹)</label>
                    <input type="number" class="form-control" id="claimAmount" min="0.01" step="0.01" required>
                </div>
                <button type="submit" class="btn btn-primary">Submit Claim</button>
            </form>
        </div>
    </div>

    <!-- Premium Calculator / Policy Details Section -->
    <div id="premium-calculator-section" class="dashboard-section" style="display: none;">
        <h2 class="h4 fw-bold text-gray-700 mb-3">View Policy Details & Premium</h2>
        <div class="form-section">
            <div id="policyDetailsMessage" class="alert-message"></div>
            <form id="policyDetailsForm">
                <div class="mb-3">
                    <label for="policySelect" class="form-label">Select Policy</label>
                    <select class="form-select" id="policySelect" required>
                        <option value="">-- Select a Policy --</option>
                        <!-- Options populated by JavaScript -->
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">View Details</button>
            </form>
            <div id="policyDetailsResult" class="mt-4 p-3 bg-light border rounded" style="display: none;">
                <h5 class="fw-semibold">Selected Policy Details:</h5>
                <p><strong>Name:</strong> <span id="detailPolicyName"></span></p>
                <p><strong>Type:</strong> <span id="detailPolicyType"></span></p>
                <p><strong>Coverage:</strong> <span id="detailCoverageAmount"></span></p>
                <p><strong>Premium:</strong> <span id="detailPremiumAmount"></span></p>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <!-- Chart.js CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>

    <script>
        // --- Employee ID (from logged-in user claims) ---
        const employeeId = parseInt("@(User.FindFirst("EmployeeId")?.Value ?? "0")");
        console.log("Initialization: Employee ID from claims:", employeeId);

        // --- Data Variables ---
        let enrolledPoliciesData = [];
        let availablePoliciesData = [];
        let claimsData = [];

        // --- Chart Instances ---
        let enrolledPoliciesByTypeChartInstance = null;
        let claimsStatusChartInstance = null;
        let enrollmentTrendChartInstance = null;

        // --- Utility Functions ---
        function formatCurrency(amount) {
            const cleanedAmount = String(amount).replace(/[^0-9.]/g, '');
            const numAmount = parseFloat(cleanedAmount);

            if (isNaN(numAmount)) {
                console.warn(`formatCurrency received non-numeric value: ${amount}. Returning as is.`);
                return amount;
            }
            return `₹${numAmount.toLocaleString('en-IN', { minimumFractionDigits: 0, maximumFractionDigits: 2 })}`;
        }

        function getStatusBadgeHtml(status) {
            let colorClass = '';
            let iconClass = '';
            switch (status?.toUpperCase()) {
                case 'APPROVED':
                    colorClass = 'approved';
                    iconClass = 'fas fa-check-circle';
                    break;
                case 'SUBMITTED':
                    colorClass = 'submitted';
                    iconClass = 'fas fa-clock';
                    break;
                case 'REJECTED':
                    colorClass = 'rejected';
                    iconClass = 'fas fa-times-circle';
                    break;
                case 'ACTIVE':
                    colorClass = 'active-enrollment';
                    iconClass = 'fas fa-check-circle';
                    break;
                case 'PENDING':
                    colorClass = 'pending-enrollment';
                    iconClass = 'fas fa-hourglass-half';
                    break;
                case 'CANCELLED':
                    colorClass = 'cancelled-enrollment';
                    iconClass = 'fas fa-times-circle';
                    break;
                default:
                    colorClass = 'secondary';
                    iconClass = 'fas fa-question-circle';
            }
            return `<span class="status-badge ${colorClass}"><i class="${iconClass}"></i> ${status || 'N/A'}</span>`;
        }

        function showLoadingSpinner() {
            console.log("Spinner: Showing loading spinner.");
            document.getElementById('loading-spinner').style.display = 'flex';
        }

        function hideLoadingSpinner() {
            console.log("Spinner: Hiding loading spinner.");
            document.getElementById('loading-spinner').style.display = 'none';
        }

        function displayMessage(elementId, message, type) {
            console.log(`Message: Displaying ${type} message for ${elementId}: ${message}`);
            const msgElement = document.getElementById(elementId);
            if (msgElement) {
                msgElement.textContent = message;
                msgElement.className = `alert-message alert-${type}`;
                msgElement.style.display = 'block';
                setTimeout(() => {
                    msgElement.style.display = 'none';
                    console.log(`Message: Hiding message for ${elementId}.`);
                }, 5000);
            } else {
                console.warn(`displayMessage: Element with ID '${elementId}' not found.`);
            }
        }


        // --- Data Fetching Functions ---

        async function fetchEnrolledPolicies() {
            console.log("Fetch: Starting fetchEnrolledPolicies.");
            if (employeeId === 0) {
                console.error("Fetch Error: Employee ID is 0. Cannot fetch enrolled policies.");
                return [];
            }
            try {
                const response = await fetch(`/api/employee/enrolled-policies/${employeeId}`);
                if (!response.ok) {
                    const errorBody = await response.json().catch(() => ({ message: `HTTP error! status: ${response.status} ${response.statusText}` }));
                    throw new Error(errorBody.message || `HTTP error! status: ${response.status} ${response.statusText}`);
                }
                const data = await response.json();
                console.log("Fetch: fetchEnrolledPolicies successful. Data length:", data.length);
                return data;
            } catch (error) {
                console.error("Fetch Error: fetchEnrolledPolicies failed:", error);
                displayMessage('enrolledPoliciesTableBody', `Failed to load enrolled policies: ${error.message || 'Unknown error'}.`, 'danger');
                return [];
            }
        }

        async function fetchAvailablePolicies() {
            console.log("Fetch: Starting fetchAvailablePolicies.");
            try {
                const response = await fetch('/api/employee/available-policies');
                if (!response.ok) {
                    const errorBody = await response.json().catch(() => ({ message: `HTTP error! status: ${response.status} ${response.statusText}` }));
                    throw new Error(errorBody.message || `HTTP error! status: ${response.status} ${response.statusText}`);
                }
                const data = await response.json();
                console.log("Fetch: fetchAvailablePolicies successful. Data length:", data.length);
                return data;
            } catch (error) {
                console.error("Fetch Error: fetchAvailablePolicies failed:", error);
                displayMessage('availablePoliciesTableBody', `Failed to load available policies: ${error.message || 'Unknown error'}.`, 'danger');
                return [];
            }
        }

        async function fetchClaims() {
            console.log("Fetch: Starting fetchClaims.");
            if (employeeId === 0) {
                console.error("Fetch Error: Employee ID is 0. Cannot fetch claims.");
                return [];
            }
            try {
                const response = await fetch(`/api/employee/claims/${employeeId}`);
                if (!response.ok) {
                    const errorBody = await response.json().catch(() => ({ message: `HTTP error! status: ${response.status} ${response.statusText}` }));
                    throw new Error(errorBody.message || `HTTP error! status: ${response.status} ${response.statusText}`);
                }
                const data = await response.json();
                console.log("Fetch: fetchClaims successful. Data length:", data.length);
                return data;
            } catch (error) {
                console.error("Fetch Error: fetchClaims failed:", error);
                displayMessage('claimsTableBody', `Failed to load claims: ${error.message || 'Unknown error'}.`, 'danger');
                return [];
            }
        }

        // --- Render Functions for Sections ---

        async function renderOverviewSection() {
            console.log("Render: Entering renderOverviewSection.");
            try {
                const [enrolledPolicies, claims, availablePolicies] = await Promise.all([
                    fetchEnrolledPolicies(),
                    fetchClaims(),
                    fetchAvailablePolicies()
                ]);

                enrolledPoliciesData = enrolledPolicies;
                claimsData = claims;
                availablePoliciesData = availablePolicies;

                console.log("Render: Overview data fetched. Enrolled:", enrolledPoliciesData.length, "Claims:", claimsData.length, "Available:", availablePoliciesData.length);

                document.getElementById('kpi-total-enrolled-policies').textContent = enrolledPoliciesData.length;
                document.getElementById('kpi-total-claims-submitted').textContent = claimsData.length;
                document.getElementById('kpi-total-available-policies').textContent = availablePoliciesData.length;
                console.log("Render: KPIs updated.");

                renderEnrolledPoliciesByTypeChart();
                renderClaimsStatusChart();
                renderEnrollmentTrendChart();
                console.log("Render: Charts render functions called.");
            } catch (error) {
                console.error("Render Error: renderOverviewSection failed:", error);
            }
            console.log("Render: Exiting renderOverviewSection.");
        }


        async function renderEnrolledPoliciesSection() {
            console.log("Render: Entering renderEnrolledPoliciesSection.");
            try {
                if (enrolledPoliciesData.length === 0) {
                     enrolledPoliciesData = await fetchEnrolledPolicies();
                }

                const tableBody = document.getElementById('enrolledPoliciesTableBody');
                tableBody.innerHTML = '';

                if (enrolledPoliciesData.length === 0) {
                    const row = tableBody.insertRow();
                    row.innerHTML = `<td colspan="7" class="text-center text-muted py-4">No enrolled policies found.</td>`;
                    console.log("Render: Enrolled policies table: No data.");
                } else {
                    enrolledPoliciesData.forEach(policy => {
                        const row = tableBody.insertRow();
                        row.innerHTML = `
                            <td>${policy.enrollmentId}</td>
                            <td>${policy.policyName || 'N/A'}</td>
                            <td>${policy.policyType || 'N/A'}</td>
                            <td>${formatCurrency(policy.coverageAmount)}</td>
                            <td>${formatCurrency(policy.premiumAmount)}</td>
                            <td>${policy.enrollmentDate || 'N/A'}</td>
                            <td>${getStatusBadgeHtml(policy.status)}</td>
                        `;
                    });
                    console.log("Render: Enrolled policies table: Data rendered.");
                }
            } catch (error) {
                console.error("Render Error: renderEnrolledPoliciesSection failed:", error);
            }
            console.log("Render: Exiting renderEnrolledPoliciesSection.");
        }

        async function renderAvailablePoliciesSection() {
            console.log("Render: Entering renderAvailablePoliciesSection.");
            try {
                if (availablePoliciesData.length === 0) {
                    availablePoliciesData = await fetchAvailablePolicies();
                }

                const tableBody = document.getElementById('availablePoliciesTableBody');
                tableBody.innerHTML = '';

                if (availablePoliciesData.length === 0) {
                    const row = tableBody.insertRow();
                    row.innerHTML = `<td colspan="5" class="text-center text-muted py-4">No policies available.</td>`;
                    console.log("Render: Available policies table: No data.");
                } else {
                    availablePoliciesData.forEach(policy => {
                        const row = tableBody.insertRow();
                        row.innerHTML = `
                            <td>${policy.id}</td>
                            <td>${policy.name || 'N/A'}</td>
                            <td>${policy.type || 'N/A'}</td>
                            <td>${formatCurrency(policy.coverageAmount)}</td>
                            <td>${formatCurrency(policy.premiumAmount)}</td>
                        `;
                    });
                    console.log("Render: Available policies table: Data rendered.");
                }
            } catch (error) {
                console.error("Render Error: renderAvailablePoliciesSection failed:", error);
            }
            console.log("Render: Exiting renderAvailablePoliciesSection.");
        }

        async function renderEnrollmentCreationSection() {
            console.log("Render: Entering renderEnrollmentCreationSection.");
            try {
                const selectElement = document.getElementById('enrollmentPolicySelect');
                selectElement.innerHTML = '<option value="">-- Select a Policy --</option>';

                availablePoliciesData = await fetchAvailablePolicies();
                if (availablePoliciesData.length > 0) {
                    availablePoliciesData.forEach(policy => {
                        const option = document.createElement('option');
                        option.value = policy.id;
                        option.textContent = `${policy.name} (${policy.type}) - ${formatCurrency(policy.premiumAmount)}`;
                        selectElement.appendChild(option);
                    });
                    console.log("Render: Enrollment creation select: Data rendered.");
                } else {
                    displayMessage('enrollmentMessage', 'No policies available for enrollment.', 'info');
                    console.log("Render: Enrollment creation select: No policies available.");
                }
            } catch (error) {
                console.error("Render Error: renderEnrollmentCreationSection failed:", error);
            }
            console.log("Render: Exiting renderEnrollmentCreationSection.");
        }

        async function renderMyClaimsSection() {
            console.log("Render: Entering renderMyClaimsSection.");
            try {
                if (claimsData.length === 0) {
                    claimsData = await fetchClaims();
                }

                const tableBody = document.getElementById('claimsTableBody');
                tableBody.innerHTML = '';

                if (claimsData.length === 0) {
                    const row = tableBody.insertRow();
                    row.innerHTML = `<td colspan="8" class="text-center text-muted py-4">No claims submitted yet.</td>`;
                    console.log("Render: My Claims table: No data.");
                } else {
                    claimsData.forEach(claim => {
                        const row = tableBody.insertRow();
                        row.innerHTML = `
                            <td>${claim.id}</td>
                            <td>${claim.enrollmentId}</td>
                            <td>${claim.policyName || 'N/A'}</td>
                            <td>${claim.policyType || 'N/A'}</td>
                            <td>${claim.claimDate || 'N/A'}</td>
                            <td>${formatCurrency(claim.requestedAmount)}</td>
                            <td>${formatCurrency(claim.approvedAmount)}</td>
                            <td>${getStatusBadgeHtml(claim.status)}</td>
                        `;
                    });
                    console.log("Render: My Claims table: Data rendered.");
                }
            } catch (error) {
                console.error("Render Error: renderMyClaimsSection failed:", error);
            }
            console.log("Render: Exiting renderMyClaimsSection.");
        }

        async function renderSubmitClaimSection() {
            console.log("Render: Entering renderSubmitClaimSection.");
            try {
                const selectElement = document.getElementById('claimEnrollmentSelect');
                selectElement.innerHTML = '<option value="">-- Select an Enrolled Policy --</option>';

                const activeEnrollments = (await fetchEnrolledPolicies()).filter(e => e.status?.toUpperCase() === 'ACTIVE');

                if (activeEnrollments.length > 0) {
                    activeEnrollments.forEach(enrollment => {
                        const option = document.createElement('option');
                        option.value = enrollment.enrollmentId;
                        option.textContent = `${enrollment.policyName} (Enrollment ID: ${enrollment.enrollmentId})`;
                        selectElement.appendChild(option);
                    });
                    console.log("Render: Submit Claim select: Data rendered.");
                } else {
                    displayMessage('claimMessage', 'No active enrollments found to submit a claim against.', 'info');
                    console.log("Render: Submit Claim select: No active enrollments.");
                }
            } catch (error) {
                console.error("Render Error: renderSubmitClaimSection failed:", error);
            }
            console.log("Render: Exiting renderSubmitClaimSection.");
        }

        async function renderPremiumCalculatorSection() {
            console.log("Render: Entering renderPremiumCalculatorSection.");
            try {
                const selectElement = document.getElementById('policySelect');
                selectElement.innerHTML = '<option value="">-- Select a Policy --</option>';

                availablePoliciesData = await fetchAvailablePolicies();
                if (availablePoliciesData.length > 0) {
                    availablePoliciesData.forEach(policy => {
                        const option = document.createElement('option');
                        option.value = policy.id;
                        option.textContent = `${policy.name} (${policy.type})`;
                        selectElement.appendChild(option);
                    });
                    console.log("Render: Premium Calculator select: Data rendered.");
                } else {
                    displayMessage('policyDetailsMessage', 'No policies available to view details.', 'info');
                    console.log("Render: Premium Calculator select: No policies available.");
                }
                document.getElementById('policyDetailsResult').style.display = 'none';
            } catch (error) {
                console.error("Render Error: renderPremiumCalculatorSection failed:", error);
            }
            console.log("Render: Exiting renderPremiumCalculatorSection.");
        }


        // --- Chart Rendering Logic ---

        function renderEnrolledPoliciesByTypeChart() {
            console.log("Chart: renderEnrolledPoliciesByTypeChart called.");
            if (enrolledPoliciesByTypeChartInstance) enrolledPoliciesByTypeChartInstance.destroy();

            const ctx = document.getElementById('enrolledPoliciesByTypeChart');
            if (!ctx) {
                console.error("Chart Error: Canvas element 'enrolledPoliciesByTypeChart' not found.");
                return;
            }
            const chartCtx = ctx.getContext('2d');

            const policyTypes = enrolledPoliciesData.reduce((acc, policy) => {
                const type = policy.policyType || 'Other';
                acc[type] = (acc[type] || 0) + 1;
                return acc;
            }, {});

            const labels = Object.keys(policyTypes);
            const data = Object.values(policyTypes);
            const backgroundColors = [
                '#42A5F5', // Blue
                '#66BB6A', // Green
                '#FFA726', // Orange
                '#EF5350', // Red
                '#AB47BC', // Purple
                '#78909C'  // Gray
            ];

            enrolledPoliciesByTypeChartInstance = new Chart(chartCtx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: backgroundColors.slice(0, labels.length),
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed !== null) {
                                        label += context.parsed + ' policies';
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
            console.log("Chart: EnrolledPoliciesByTypeChart rendered.");
        }

        function renderClaimsStatusChart() {
            console.log("Chart: renderClaimsStatusChart called.");
            if (claimsStatusChartInstance) claimsStatusChartInstance.destroy();

            const ctx = document.getElementById('claimsStatusChart');
            if (!ctx) {
                console.error("Chart Error: Canvas element 'claimsStatusChart' not found.");
                return;
            }
            const chartCtx = ctx.getContext('2d');

            const claimStatuses = claimsData.reduce((acc, claim) => {
                const status = claim.status?.toUpperCase() || 'OTHER';
                acc[status] = (acc[status] || 0) + 1;
                return acc;
            }, {});

            const labels = Object.keys(claimStatuses);
            const data = Object.values(claimStatuses);
            const backgroundColors = [
                '#66BB6A', // Approved - Green
                '#42A5F5', // Submitted - Blue
                '#EF5350'  // Rejected - Red
            ];

            claimsStatusChartInstance = new Chart(chartCtx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: backgroundColors.slice(0, labels.length),
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed !== null) {
                                        label += context.parsed + ' claims';
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
            console.log("Chart: ClaimsStatusChart rendered.");
        }

        function renderEnrollmentTrendChart() {
            console.log("Chart: renderEnrollmentTrendChart called.");
            if (enrollmentTrendChartInstance) enrollmentTrendChartInstance.destroy();

            const ctx = document.getElementById('enrollmentTrendChart');
            if (!ctx) {
                console.error("Chart Error: Canvas element 'enrollmentTrendChart' not found.");
                return;
            }
            const chartCtx = ctx.getContext('2d');

            const monthlyEnrollments = {};
            const today = new Date();
            const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

            for (let i = 5; i >= 0; i--) {
                const d = new Date(today.getFullYear(), today.getMonth() - i, 1);
                const monthYear = `${monthNames[d.getMonth()]}-${d.getFullYear().toString().substr(-2)}`;
                monthlyEnrollments[monthYear] = 0;
            }

            enrolledPoliciesData.forEach(enrollment => {
                const enrollmentDate = new Date(enrollment.enrollmentDate);
                const monthYear = `${monthNames[enrollmentDate.getMonth()]}-${enrollmentDate.getFullYear().toString().substr(-2)}`;
                if (monthlyEnrollments.hasOwnProperty(monthYear)) {
                    monthlyEnrollments[monthYear]++;
                }
            });

            const labels = Object.keys(monthlyEnrollments);
            const data = Object.values(monthlyEnrollments);

            enrollmentTrendChartInstance = new Chart(chartCtx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'New Enrollments',
                        data: data,
                        backgroundColor: 'rgba(13, 109, 253, 0.2)',
                        borderColor: '#0d6efd',
                        tension: 0.3,
                        fill: true,
                        pointBackgroundColor: '#0d6efd',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: '#0d6efd',
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            },
                            title: {
                                display: true,
                                text: 'Number of Enrollments'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Month'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                        }
                    }
                }
            });
            console.log("Chart: EnrollmentTrendChart rendered.");
        }


        // --- Form Submission Handlers ---

        document.getElementById('enrollmentForm').addEventListener('submit', async (event) => {
            event.preventDefault();
            console.log("Form: Enrollment form submitted.");
            showLoadingSpinner();
            const policyId = document.getElementById('enrollmentPolicySelect').value;

            if (!policyId) {
                displayMessage('enrollmentMessage', 'Please select a policy.', 'danger');
                hideLoadingSpinner();
                return;
            }

            try {
                const response = await fetch('/api/employee/submit-enrollment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ EmployeeId: employeeId, PolicyId: parseInt(policyId) })
                });

                const result = await response.json();
                if (response.ok) {
                    displayMessage('enrollmentMessage', result.message, 'success');
                    document.getElementById('enrollmentForm').reset();
                    await renderOverviewSection();
                    await renderEnrolledPoliciesSection();
                } else {
                    displayMessage('enrollmentMessage', result.message || 'Failed to submit enrollment.', 'danger');
                }
            } catch (error) {
                console.error("Form Error: Error submitting enrollment:", error);
                displayMessage('enrollmentMessage', 'An unexpected error occurred while submitting enrollment.', 'danger');
            } finally {
                hideLoadingSpinner();
            }
        });

        document.getElementById('claimForm').addEventListener('submit', async (event) => {
            event.preventDefault();
            console.log("Form: Claim form submitted.");
            showLoadingSpinner();
            const enrollmentId = document.getElementById('claimEnrollmentSelect').value;
            const claimAmount = parseFloat(document.getElementById('claimAmount').value);

            if (!enrollmentId || isNaN(claimAmount) || claimAmount <= 0) {
                displayMessage('claimMessage', 'Please select an enrolled policy and enter a valid positive amount.', 'danger');
                hideLoadingSpinner();
                return;
            }

            try {
                const response = await fetch('/api/employee/submit-claim', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ EnrollmentId: parseInt(enrollmentId), ClaimAmount: claimAmount })
                });

                const result = await response.json();
                if (response.ok) {
                    displayMessage('claimMessage', result.message, 'success');
                    document.getElementById('claimForm').reset();
                    await renderOverviewSection();
                    await renderMyClaimsSection();
                } else {
                    displayMessage('claimMessage', result.message || 'Failed to submit claim.', 'danger');
                }
            } catch (error) {
                console.error("Form Error: Error submitting claim:", error);
                displayMessage('claimMessage', 'An unexpected error occurred while submitting claim.', 'danger');
            } finally {
                hideLoadingSpinner();
            }
        });

        document.getElementById('policyDetailsForm').addEventListener('submit', async (event) => {
            event.preventDefault();
            console.log("Form: Policy details form submitted.");
            showLoadingSpinner();
            const policyId = document.getElementById('policySelect').value;
            const policyDetailsResultDiv = document.getElementById('policyDetailsResult');
            policyDetailsResultDiv.style.display = 'none';

            if (!policyId) {
                displayMessage('policyDetailsMessage', 'Please select a policy.', 'danger');
                hideLoadingSpinner();
                return;
            }

            try {
                const response = await fetch(`/api/employee/policy-details/${policyId}`);
                const result = await response.json();

                if (response.ok && !result.error) {
                    document.getElementById('detailPolicyName').textContent = result.name;
                    document.getElementById('detailPolicyType').textContent = result.type;
                    document.getElementById('detailCoverageAmount').textContent = formatCurrency(result.coverageAmount);
                    document.getElementById('detailPremiumAmount').textContent = formatCurrency(result.premiumAmount);
                    policyDetailsResultDiv.style.display = 'block';
                    displayMessage('policyDetailsMessage', 'Policy details loaded successfully.', 'success');
                } else {
                    displayMessage('policyDetailsMessage', result.error || 'Failed to fetch policy details.', 'danger');
                }
            } catch (error) {
                console.error("Form Error: Error fetching policy details:", error);
                displayMessage('policyDetailsMessage', 'An unexpected error occurred while fetching policy details.', 'danger');
            } finally {
                hideLoadingSpinner();
            }
        });


        // --- Section Switching Logic ---

        async function showSection(sectionId) {
            console.log(`Section Switch: Attempting to show section: ${sectionId}`);
            showLoadingSpinner();

            const sections = document.querySelectorAll('.dashboard-section');
            sections.forEach(section => {
                section.style.display = 'none';
            });
            document.getElementById(sectionId).style.display = 'block';
            console.log(`Section Switch: Displayed section '${sectionId}'.`);

            const navButtons = document.querySelectorAll('.btn-group button');
            navButtons.forEach(button => {
                button.classList.remove('active');
            });
            document.querySelector(`.btn-group button[data-section="${sectionId.replace('-section', '')}"]`).classList.add('active');
            console.log("Section Switch: Navigation buttons updated.");

            try {
                switch (sectionId) {
                    case 'overview-section':
                        console.log("Section Switch: Calling renderOverviewSection.");
                        await renderOverviewSection();
                        break;
                    case 'enrolled-policies-section':
                        console.log("Section Switch: Calling renderEnrolledPoliciesSection.");
                        await renderEnrolledPoliciesSection();
                        break;
                    case 'available-policies-section':
                        console.log("Section Switch: Calling renderAvailablePoliciesSection.");
                        await renderAvailablePoliciesSection();
                        break;
                    case 'enrollment-creation-section':
                        console.log("Section Switch: Calling renderEnrollmentCreationSection.");
                        await renderEnrollmentCreationSection();
                        break;
                    case 'my-claims-section':
                        console.log("Section Switch: Calling renderMyClaimsSection.");
                        await renderMyClaimsSection();
                        break;
                    case 'submit-claim-section':
                        console.log("Section Switch: Calling renderSubmitClaimSection.");
                        await renderSubmitClaimSection();
                        break;
                    case 'premium-calculator-section':
                        console.log("Section Switch: Calling renderPremiumCalculatorSection.");
                        await renderPremiumCalculatorSection();
                        break;
                }
            } catch (error) {
                console.error("Section Switch Error: Error during section rendering:", error);
            } finally {
                hideLoadingSpinner(); // ALWAYS hide spinner after the section rendering attempt completes
                console.log(`Section Switch: Completed rendering for ${sectionId}. Spinner hide attempt made.`);
            }
        }

        // --- Initial Load ---
        document.addEventListener('DOMContentLoaded', async () => {
            console.log("DOMContentLoaded: Event fired. Initializing Employee Dashboard.");

            if (employeeId === 0) {
                console.error("Initialization Error: Employee ID not found in claims. Redirecting to login.");
                hideLoadingSpinner();
                window.location.href = "/Account/Login";
                return;
            }
            console.log("DOMContentLoaded: Employee ID is valid:", employeeId);


            document.querySelectorAll('.btn-group button[data-section]').forEach(button => {
                button.addEventListener('click', function() {
                    const section = this.dataset.section;
                    showSection(`${section}-section`);
                });
            });
            console.log("DOMContentLoaded: Navigation button event listeners attached.");


            console.log("DOMContentLoaded: Calling initial showSection for 'overview-section'.");
            await showSection('overview-section');
            console.log("DOMContentLoaded: Initial showSection completed.");
        });

    </script>
}
