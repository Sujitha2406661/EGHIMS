@{
    ViewData["Title"] = "HR Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml"; // Ensure this points to your shared layout
}

<style>
    /* Custom styles for the dashboard */
    .dashboard-section {
        margin-bottom: 2rem;
    }

    .kpi-icon {
        font-size: 2.5rem; /* Larger icons for KPIs */
        margin-bottom: 0.5rem;
    }

    .kpi-title {
        font-size: 1rem;
        font-weight: 600;
        color: #6c757d; /* text-secondary */
    }

    .kpi-value {
        font-size: 2.5rem;
        font-weight: 700;
    }
    /* Specific colors for KPI values, matching Bootstrap themes */
    .text-primary {
        color: #0d6efd !important;
    }

    .text-success {
        color: #198754 !important;
    }

    .text-secondary {
        color: #6c757d !important;
    }

    .text-warning {
        color: #ffc107 !important;
    }

    .text-info { /* Added for Enrollments KPI */
        color: #0dcaf0 !important;
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.25rem 0.625rem;
        border-radius: 9999px; /* pill shape */
        font-size: 0.75rem;
        font-weight: 500;
    }

        .status-badge i {
            margin-right: 0.25rem;
        }

        .status-badge.approved {
            background-color: #d1fae5;
            color: #065f46;
        }
        /* Tailwind-like green */
        .status-badge.submitted {
            background-color: #dbeafe;
            color: #1e40af;
        }
        /* Tailwind-like blue */
        .status-badge.rejected {
            background-color: #fee2e2;
            color: #991b1b;
        }
    /* Tailwind-like red */
</style>

<div class="d-flex flex-column min-vh-100">
    <!-- Main Content Area -->
    <main class="flex-grow-1 p-4">
        <div id="loading-spinner" class="d-flex justify-content-center align-items-center" style="display: none;">
            @* <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div> *@
            <h2 class="ms-3">HR dashboard data</h2>
        </div>

        

        <!-- HR Dashboard Navigation Buttons -->
        <div class="d-flex justify-content-center mb-4" id="hr-dashboard-nav-buttons">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-primary active" data-section="hr-overview"><i class="fas fa-chart-line me-2"></i>Overview</button>
                <button type="button" class="btn btn-outline-primary" data-section="hr-employees"><i class="fas fa-users me-2"></i>Employees</button>
                <button type="button" class="btn btn-outline-primary" data-section="hr-claims"><i class="fas fa-hand-holding-usd me-2"></i>Claims</button>
                <button type="button" class="btn btn-outline-primary" data-section="hr-organizations"><i class="fas fa-building me-2"></i>Organizations</button>
                <button type="button" class="btn btn-outline-primary" data-section="hr-enrollments"><i class="fas fa-file-invoice-dollar me-2"></i>Enrollments</button>
            </div>
        </div>

        <!-- HR Dashboard Sections -->
        <!-- HR Overview Section -->
        <div id="hr-overview-section" class="dashboard-section">
            
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4 mb-4">
                <div class="col">
                    <div class="card h-100">
                        <div class="card-body">
                            <i class="fas fa-user-friends kpi-icon text-primary"></i>
                            <h3 class="kpi-title">Total Employees</h3>
                            <p class="kpi-value text-primary" id="kpi-hr-total-employees"></p>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card h-100">
                        <div class="card-body">
                            <i class="fas fa-clipboard-list kpi-icon text-info"></i>
                            <h3 class="kpi-title">Total Enrollments</h3>
                            <p class="kpi-value text-info" id="kpi-hr-total-enrollments"></p>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card h-100">
                        <div class="card-body">
                            <i class="fas fa-hand-holding-usd kpi-icon text-warning"></i>
                            <h3 class="kpi-title">Total Claims</h3>
                            <p class="kpi-value text-warning" id="kpi-hr-total-claims"></p>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card h-100">
                        <div class="card-body">
                            <i class="fas fa-building kpi-icon text-secondary"></i>
                            <h3 class="kpi-title">Total Organizations</h3>
                            <p class="kpi-value text-secondary" id="kpi-hr-total-organizations"></p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row g-4 mb-4">
                <div class="col-lg-6">
                    <div class="card h-100 p-3">
                        <h3 class="h5 fw-semibold text-gray-700 mb-3">Employee Enrollment Status</h3>
                        <canvas id="employeeEnrollmentChart" class="w-100" style="max-height: 300px;"></canvas>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="card h-100 p-3">
                        <h3 class="h5 fw-semibold text-gray-700 mb-3">Claims Status Distribution</h3>
                        <canvas id="claimsStatusChart" class="w-100" style="max-height: 300px;"></canvas>
                    </div>
                </div>
            </div>

            <div class="card mb-4 p-3">
                <h3 class="h5 fw-semibold text-gray-700 mb-3">Recent Enrollments</h3>
                <div class="table-responsive">
                    <table class="table table-hover table-striped">
                        <thead class="bg-light">
                            <tr>
                                <th>Enrollment ID</th>
                                <th>Employee</th>
                                <th>Policy</th>
                                <th>Enrollment Date</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="hrRecentEnrollmentsTableBody">
                            <!-- Data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- HR Employees Section -->
        <div id="hr-employees-section" class="dashboard-section" style="display: none;">
            <h2 class="h3 fw-bold text-gray-800 mb-4">Employee Directory (HR View)</h2>
            <div class="card mb-4 p-3">
                <h3 class="h5 fw-semibold text-gray-700 mb-3">All Employees</h3>
                <div class="table-responsive">
                    <table class="table table-hover table-striped">
                        <thead class="bg-light">
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Address</th>
                                <th>Designation</th>
                                <th>Organization ID</th>
                                <th>Organization Name</th>
                                <th>Username</th>
                            </tr>
                        </thead>
                        <tbody id="hrEmployeesTableBody">
                            <!-- Data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- HR Claims Section -->
        <div id="hr-claims-section" class="dashboard-section" style="display: none;">
            <h2 class="h3 fw-bold text-gray-800 mb-4">Claims Details (HR View)</h2>
            <div class="d-flex mb-3">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-primary active" data-filter="All">All</button>
                    <button type="button" class="btn btn-outline-primary" data-filter="Submitted">Submitted</button>
                    <button type="button" class="btn btn-outline-primary" data-filter="Approved">Approved</button>
                    <button type="button" class="btn btn-outline-primary" data-filter="Rejected">Rejected</button>
                </div>
            </div>
            <div class="table-responsive">
                <table class="table table-hover table-striped">
                    <thead class="bg-light">
                        <tr>
                            <th>Claim ID</th>
                            <th>Employee</th>
                            <th>Policy Type</th>
                            <th>Claim Date</th>
                            <th>Requested Amt.</th>
                            <th>Approved Amt.</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="hrClaimsTableBody">
                        <!-- Data will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- HR Organizations Section -->
        <div id="hr-organizations-section" class="dashboard-section" style="display: none;">
            <h2 class="h3 fw-bold text-gray-800 mb-4">Organization Details (HR View)</h2>
            <div class="card mb-4 p-3">
                <h3 class="h5 fw-semibold text-gray-700 mb-3">All Registered Organizations</h3>
                <div class="table-responsive">
                    <table class="table table-hover table-striped">
                        <thead class="bg-light">
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Contact Person</th>
                                <th>Contact Email</th>
                            </tr>
                        </thead>
                        <tbody id="hrOrganizationsTableBody">
                            <!-- Data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- HR Enrollments Section (New) -->
        <div id="hr-enrollments-section" class="dashboard-section" style="display: none;">
            <h2 class="h3 fw-bold text-gray-800 mb-4">Enrollment Details (HR View)</h2>
            <div class="card mb-4 p-3">
                <h3 class="h5 fw-semibold text-gray-700 mb-3">All Enrollments</h3>
                <div class="d-flex mb-3">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-primary active" data-filter="All">All</button>
                        <button type="button" class="btn btn-outline-primary" data-filter="ACTIVE">Active</button>
                        <button type="button" class="btn btn-outline-primary" data-filter="CANCELLED">Cancelled</button>
                    </div>
                </div>
                <div class="table-responsive">
                    <table class="table table-hover table-striped">
                        <thead class="bg-light">
                            <tr>
                                <th>Enrollment ID</th>
                                <th>Employee Name</th>
                                <th>Policy Name</th>
                                <th>Policy Type</th>
                                <th>Enrollment Date</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="hrEnrollmentsTableBody">
                            <!-- Data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

    </main>
</div>

@section Scripts {
    <!-- Chart.js CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>

    <script>
        // --- Data Variables ---
        let hrEmployeesData = [];
        let hrClaimsData = [];
        let hrOrganizationsData = [];
        let hrEnrollmentsData = [];

        // --- Chart Instances ---
        let employeeEnrollmentChartInstance = null; // Used by HR Overview now
        let claimsStatusChartInstance = null; // Used by HR Overview now


        // --- Utility Functions ---
        function formatCurrency(amount) {
            const numAmount = parseFloat(amount);
            if (isNaN(numAmount)) return amount;
            return `₹${numAmount.toLocaleString('en-IN')}`;
        }

        function getStatusBadgeHtml(status) {
            let colorClass = '';
            let iconClass = '';
            switch (status?.toUpperCase()) {
                case 'APPROVED':
                case 'ACTIVE': // Added for enrollments
                    colorClass = 'approved';
                    iconClass = 'fas fa-check-circle';
                    break;
                case 'SUBMITTED':
                case 'PENDING': // For other pending statuses
                    colorClass = 'submitted';
                    iconClass = 'fas fa-clock';
                    break;
                case 'REJECTED':
                case 'CANCELLED': // Added for enrollments
                    colorClass = 'rejected';
                    iconClass = 'fas fa-times-circle';
                    break;
                default:
                    colorClass = 'secondary';
                    iconClass = 'fas fa-question-circle';
            }
            return `<span class="status-badge ${colorClass}"><i class="${iconClass}"></i> ${status || 'N/A'}</span>`;
        }

        function showLoadingSpinner() {
            document.getElementById('loading-spinner').style.display = 'flex';
        }

        function hideLoadingSpinner() {
            document.getElementById('loading-spinner').style.display = 'none';
        }

        // --- Data Fetching Functions (HR Specific) ---

        async function fetchHrDashboardData() {
            showLoadingSpinner();
            try {
                const [hrEmployeesRes, hrClaimsRes, hrOrganizationsRes, hrEnrollmentsRes] = await Promise.all([
                    fetch('/api/dashboard/hr-employees'),
                    fetch('/api/dashboard/hr-claims'),
                    fetch('/api/dashboard/hr-organizations'),
                    fetch('/api/dashboard/hr-enrollments')
                ]);

                if (!hrEmployeesRes.ok) throw new Error(`HTTP error fetching HR employees: ${hrEmployeesRes.status} ${hrEmployeesRes.statusText}`);
                if (!hrClaimsRes.ok) throw new Error(`HTTP error fetching HR claims: ${hrClaimsRes.status} ${hrClaimsRes.statusText}`);
                if (!hrOrganizationsRes.ok) throw new Error(`HTTP error fetching HR organizations: ${hrOrganizationsRes.status} ${hrOrganizationsRes.statusText}`);
                if (!hrEnrollmentsRes.ok) throw new Error(`HTTP error fetching HR enrollments: ${hrEnrollmentsRes.status} ${hrEnrollmentsRes.statusText}`);

                hrEmployeesData = await hrEmployeesRes.json();
                hrClaimsData = await hrClaimsRes.json();
                hrOrganizationsData = await hrOrganizationsRes.json();
                hrEnrollmentsData = await hrEnrollmentsRes.json();

            } catch (error) {
                console.error("Error fetching HR dashboard data:", error);
                // In a real app, display a user-friendly error message
            } finally {
                hideLoadingSpinner();
            }
        }


        // --- Render Functions (HR Dashboard) ---

        async function renderHrOverviewSection() {
            // KPI Cards
            document.getElementById('kpi-hr-total-employees').textContent = hrEmployeesData.length;
            document.getElementById('kpi-hr-total-enrollments').textContent = hrEnrollmentsData.length;
            document.getElementById('kpi-hr-total-claims').textContent = hrClaimsData.length;
            document.getElementById('kpi-hr-total-organizations').textContent = hrOrganizationsData.length;

            // Charts
            await initializeEmployeeEnrollmentChart(); // HR specific enrollment chart
            renderClaimsStatusChart(); // HR specific claims status chart

            // Tables
            renderRecentEnrollmentsTable();
        }

        async function renderHrEmployeesSection() {
            const tableBody = document.getElementById('hrEmployeesTableBody');
            tableBody.innerHTML = '';

            if (hrEmployeesData.length === 0) {
                const row = tableBody.insertRow();
                row.innerHTML = `<td colspan="9" class="text-center text-muted py-4">No employees found.</td>`;
                return;
            }

            hrEmployeesData.forEach(employee => {
                const row = tableBody.insertRow();
                row.innerHTML = `
                    <td>${employee.id}</td>
                    <td>${employee.name || 'N/A'}</td>
                    <td>${employee.email || 'N/A'}</td>
                    <td>${employee.phone || 'N/A'}</td>
                    <td>${employee.address || 'N/A'}</td>
                    <td>${employee.designation || 'N/A'}</td>
                    <td>${employee.organizationId || 'N/A'}</td>
                    <td>${employee.organizationName || 'N/A'}</td>
                    <td>${employee.username || 'N/A'}</td>
                `;
            });
        }

        async function renderHrClaimsSection(filterStatus = 'All') {
            const tableBody = document.getElementById('hrClaimsTableBody');
            tableBody.innerHTML = '';

            const filteredClaims = filterStatus === 'All'
                ? hrClaimsData
                : hrClaimsData.filter(claim => claim.status?.toUpperCase() === filterStatus?.toUpperCase());

            if (filteredClaims.length === 0) {
                const row = tableBody.insertRow();
                row.innerHTML = `<td colspan="7" class="text-center text-muted py-4">No claims found for this status.</td>`;
                return;
            }

            filteredClaims.forEach(claim => {
                const row = tableBody.insertRow();
                row.innerHTML = `
                    <td>${claim.id}</td>
                    <td>${claim.employeeName || 'N/A'}</td>
                    <td>${claim.policyType || 'N/A'}</td>
                    <td>${claim.claimDate || 'N/A'}</td>
                    <td>${formatCurrency(claim.requestedAmount)}</td>
                    <td>${formatCurrency(claim.approvedAmount || 0)}</td>
                    <td>${getStatusBadgeHtml(claim.status)}</td>
                `;
            });
        }

        async function renderHrOrganizationsSection() {
            const tableBody = document.getElementById('hrOrganizationsTableBody');
            tableBody.innerHTML = '';

            if (hrOrganizationsData.length === 0) {
                const row = tableBody.insertRow();
                row.innerHTML = `<td colspan="4" class="text-center text-muted py-4">No organizations found.</td>`;
                return;
            }

            hrOrganizationsData.forEach(org => {
                const row = tableBody.insertRow();
                row.innerHTML = `
                    <td>${org.id}</td>
                    <td><a href="#" class="text-primary fw-medium">${org.name || 'N/A'}</a></td>
                    <td>${org.contactPerson || 'N/A'}</td>
                    <td>${org.contactEmail || 'N/A'}</td>
                `;
            });
        }

        async function renderHrEnrollmentsSection(filterStatus = 'All') {
            const tableBody = document.getElementById('hrEnrollmentsTableBody');
            tableBody.innerHTML = '';

            const filteredEnrollments = filterStatus === 'All'
                ? hrEnrollmentsData
                : hrEnrollmentsData.filter(enrollment => enrollment.status?.toUpperCase() === filterStatus?.toUpperCase());

            if (filteredEnrollments.length === 0) {
                const row = tableBody.insertRow();
                row.innerHTML = `<td colspan="6" class="text-center text-muted py-4">No enrollments found for this status.</td>`;
                return;
            }

            filteredEnrollments.forEach(enrollment => {
                const row = tableBody.insertRow();
                row.innerHTML = `
                    <td>${enrollment.id}</td>
                    <td>${enrollment.employeeName || 'N/A'}</td>
                    <td>${enrollment.policyName || 'N/A'}</td>
                    <td>${enrollment.policyType || 'N/A'}</td>
                    <td>${enrollment.enrollmentDate || 'N/A'}</td>
                    <td>${getStatusBadgeHtml(enrollment.status)}</td>
                `;
            });
        }

        function renderRecentEnrollmentsTable() {
            const tableBody = document.getElementById('hrRecentEnrollmentsTableBody');
            tableBody.innerHTML = ''; // Clear previous data

            const recentEnrollments = [...hrEnrollmentsData]
                .sort((a, b) => new Date(b.enrollmentDate) - new Date(a.enrollmentDate)) // Most recent first
                .slice(0, 5);

            if (recentEnrollments.length === 0) {
                const row = tableBody.insertRow();
                row.innerHTML = `<td colspan="5" class="text-center text-muted py-4">No recent enrollments.</td>`;
                return;
            }

            recentEnrollments.forEach(enrollment => {
                const row = tableBody.insertRow();
                row.innerHTML = `
                    <td>${enrollment.id}</td>
                    <td>${enrollment.employeeName || 'N/A'}</td>
                    <td>${enrollment.policyName || 'N/A'}</td>
                    <td>${enrollment.enrollmentDate || 'N/A'}</td>
                    <td>${getStatusBadgeHtml(enrollment.status)}</td>
                `;
            });
        }


        // --- Chart Rendering Logic (HR Specific) ---

        // Employee Enrollment Status (shared between Admin and HR, now HR-specific)
        async function initializeEmployeeEnrollmentChart() {
            const ctx = document.getElementById('employeeEnrollmentChart').getContext('2d');
            if (employeeEnrollmentChartInstance) { employeeEnrollmentChartInstance.destroy(); }

            // This data comes from /api/dashboard/employee-enrollment-chart-data
            // which the fetchHrDashboardData already calls.
            const totalEmployees = hrEmployeesData.length;
            const activeEnrollments = hrEnrollmentsData.filter(e => e.status?.toUpperCase() === 'ACTIVE').length;
            const notEnrolledCount = totalEmployees - activeEnrollments; // Simplified logic, assuming active means enrolled

            employeeEnrollmentChartInstance = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: ['Enrolled (Active Policy)', 'Not Enrolled / Inactive Policy'],
                    datasets: [{
                        data: [activeEnrollments, notEnrolledCount],
                        backgroundColor: ['#4CAF50', '#FFC107'], // Green, Amber
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed !== null) {
                                        label += context.parsed + ' employees';
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                },
            });
        }

        // Claims Status Distribution (re-used for HR from Admin)
        function renderClaimsStatusChart() {
            if (claimsStatusChartInstance) claimsStatusChartInstance.destroy();

            const ctx = document.getElementById('claimsStatusChart').getContext('2d');
            const data = [
                { name: 'Approved', value: hrClaimsData.filter(c => c.status?.toUpperCase() === 'APPROVED').length, color: '#34D399' },
                { name: 'Submitted', value: hrClaimsData.filter(c => c.status?.toUpperCase() === 'SUBMITTED').length, color: '#60A5FA' },
                { name: 'Rejected', value: hrClaimsData.filter(c => c.status?.toUpperCase() === 'REJECTED').length, color: '#F87171' },
            ];

            claimsStatusChartInstance = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: data.map(d => d.name),
                    datasets: [{
                        data: data.map(d => d.value),
                        backgroundColor: data.map(d => d.color),
                        hoverOffset: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed !== null) {
                                        label += context.parsed + ' claims';
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                },
            });
        }


        // --- Section Switching Logic ---
        async function showSection(sectionId) {
            showLoadingSpinner();

            const sections = document.querySelectorAll('.dashboard-section');
            sections.forEach(section => {
                section.style.display = 'none';
            });
            document.getElementById(sectionId).style.display = 'block';

            // Update active state of nav buttons
            const navButtons = document.querySelectorAll('#hr-dashboard-nav-buttons .btn-group button');
            navButtons.forEach(button => {
                button.classList.remove('active');
            });
            document.querySelector(`#hr-dashboard-nav-buttons button[data-section="${sectionId.replace('-section', '')}"]`).classList.add('active');

            // Render content based on the selected section
            switch (sectionId) {
                case 'hr-overview-section':
                    await renderHrOverviewSection();
                    break;
                case 'hr-employees-section':
                    await renderHrEmployeesSection();
                    break;
                case 'hr-claims-section':
                    await renderHrClaimsSection();
                    break;
                case 'hr-organizations-section':
                    await renderHrOrganizationsSection();
                    break;
                case 'hr-enrollments-section':
                    await renderHrEnrollmentsSection();
                    break;
            }
            hideLoadingSpinner();
        }

        // --- Event Listeners and Initial Load ---
        document.addEventListener('DOMContentLoaded', async () => {
            // Attach event listeners for HR Dashboard Navigation Buttons
            document.querySelectorAll('#hr-dashboard-nav-buttons .btn-group button').forEach(button => {
                button.addEventListener('click', function() {
                    const section = this.dataset.section;
                    showSection(`${section}-section`);
                });
            });

            // Claims Filter Logic for HR Claims section
            document.querySelectorAll('#hr-claims-section .btn-group button').forEach(button => {
                button.addEventListener('click', (event) => {
                    document.querySelectorAll('#hr-claims-section .btn-group button').forEach(btn => btn.classList.remove('active'));
                    event.target.classList.add('active');
                    const filterStatus = event.target.dataset.filter;
                    renderHrClaimsSection(filterStatus);
                });
            });

            // Enrollments Filter Logic for HR Enrollments section
            document.querySelectorAll('#hr-enrollments-section .btn-group button').forEach(button => {
                button.addEventListener('click', (event) => {
                    document.querySelectorAll('#hr-enrollments-section .btn-group button').forEach(btn => btn.classList.remove('active'));
                    event.target.classList.add('active');
                    const filterStatus = event.target.dataset.filter;
                    renderHrEnrollmentsSection(filterStatus);
                });
            });

            // Initial fetch of all HR dashboard data
            await fetchHrDashboardData();
            // Show the default HR overview section
            await showSection('hr-overview-section');
        });

    </script>
}
